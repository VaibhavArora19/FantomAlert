// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class newListedChannel extends ethereum.Event {
  get params(): newListedChannel__Params {
    return new newListedChannel__Params(this);
  }
}

export class newListedChannel__Params {
  _event: newListedChannel;

  constructor(event: newListedChannel) {
    this._event = event;
  }

  get channelName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get channelAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class notificationMultiple extends ethereum.Event {
  get params(): notificationMultiple__Params {
    return new notificationMultiple__Params(this);
  }
}

export class notificationMultiple__Params {
  _event: notificationMultiple;

  constructor(event: notificationMultiple) {
    this._event = event;
  }

  get title(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get body(): string {
    return this._event.parameters[1].value.toString();
  }

  get _channel(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get subscribers(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class notificationSingle extends ethereum.Event {
  get params(): notificationSingle__Params {
    return new notificationSingle__Params(this);
  }
}

export class notificationSingle__Params {
  _event: notificationSingle;

  constructor(event: notificationSingle) {
    this._event = event;
  }

  get title(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get body(): string {
    return this._event.parameters[1].value.toString();
  }

  get _channel(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get subscriber(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class notificationToAll extends ethereum.Event {
  get params(): notificationToAll__Params {
    return new notificationToAll__Params(this);
  }
}

export class notificationToAll__Params {
  _event: notificationToAll;

  constructor(event: notificationToAll) {
    this._event = event;
  }

  get title(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get body(): string {
    return this._event.parameters[1].value.toString();
  }

  get _channel(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get subscribers(): Array<Address> {
    return this._event.parameters[3].value.toAddressArray();
  }
}

export class Channels__channelAddressToChannelResult {
  value0: Address;
  value1: string;
  value2: Address;

  constructor(value0: Address, value1: string, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getChannelAddress(): Address {
    return this.value0;
  }

  getChannelName(): string {
    return this.value1;
  }

  getOwner(): Address {
    return this.value2;
  }
}

export class Channels__channelsResult {
  value0: Address;
  value1: string;
  value2: Address;

  constructor(value0: Address, value1: string, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getChannelAddress(): Address {
    return this.value0;
  }

  getChannelName(): string {
    return this.value1;
  }

  getOwner(): Address {
    return this.value2;
  }
}

export class Channels__getAllChannelsResultValue0Struct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get channelName(): string {
    return this[1].toString();
  }

  get owner(): Address {
    return this[2].toAddress();
  }
}

export class Channels__getChannelByNameResultValue0Struct extends ethereum.Tuple {
  get channelAddress(): Address {
    return this[0].toAddress();
  }

  get channelName(): string {
    return this[1].toString();
  }

  get owner(): Address {
    return this[2].toAddress();
  }
}

export class Channels extends ethereum.SmartContract {
  static bind(address: Address): Channels {
    return new Channels("Channels", address);
  }

  channelAddressToChannel(
    param0: Address
  ): Channels__channelAddressToChannelResult {
    let result = super.call(
      "channelAddressToChannel",
      "channelAddressToChannel(address):(address,string,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Channels__channelAddressToChannelResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toAddress()
    );
  }

  try_channelAddressToChannel(
    param0: Address
  ): ethereum.CallResult<Channels__channelAddressToChannelResult> {
    let result = super.tryCall(
      "channelAddressToChannel",
      "channelAddressToChannel(address):(address,string,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Channels__channelAddressToChannelResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toAddress()
      )
    );
  }

  channels(param0: BigInt): Channels__channelsResult {
    let result = super.call(
      "channels",
      "channels(uint256):(address,string,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Channels__channelsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toAddress()
    );
  }

  try_channels(param0: BigInt): ethereum.CallResult<Channels__channelsResult> {
    let result = super.tryCall(
      "channels",
      "channels(uint256):(address,string,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Channels__channelsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toAddress()
      )
    );
  }

  getAllChannels(): Array<Channels__getAllChannelsResultValue0Struct> {
    let result = super.call(
      "getAllChannels",
      "getAllChannels():((address,string,address)[])",
      []
    );

    return result[0].toTupleArray<Channels__getAllChannelsResultValue0Struct>();
  }

  try_getAllChannels(): ethereum.CallResult<
    Array<Channels__getAllChannelsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllChannels",
      "getAllChannels():((address,string,address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Channels__getAllChannelsResultValue0Struct>()
    );
  }

  getChannelByName(
    _channelName: string
  ): Channels__getChannelByNameResultValue0Struct {
    let result = super.call(
      "getChannelByName",
      "getChannelByName(string):((address,string,address))",
      [ethereum.Value.fromString(_channelName)]
    );

    return changetype<Channels__getChannelByNameResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getChannelByName(
    _channelName: string
  ): ethereum.CallResult<Channels__getChannelByNameResultValue0Struct> {
    let result = super.tryCall(
      "getChannelByName",
      "getChannelByName(string):((address,string,address))",
      [ethereum.Value.fromString(_channelName)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Channels__getChannelByNameResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }
}

export class AddChannelCall extends ethereum.Call {
  get inputs(): AddChannelCall__Inputs {
    return new AddChannelCall__Inputs(this);
  }

  get outputs(): AddChannelCall__Outputs {
    return new AddChannelCall__Outputs(this);
  }
}

export class AddChannelCall__Inputs {
  _call: AddChannelCall;

  constructor(call: AddChannelCall) {
    this._call = call;
  }

  get _channelName(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AddChannelCall__Outputs {
  _call: AddChannelCall;

  constructor(call: AddChannelCall) {
    this._call = call;
  }
}

export class MultipleNotificationCall extends ethereum.Call {
  get inputs(): MultipleNotificationCall__Inputs {
    return new MultipleNotificationCall__Inputs(this);
  }

  get outputs(): MultipleNotificationCall__Outputs {
    return new MultipleNotificationCall__Outputs(this);
  }
}

export class MultipleNotificationCall__Inputs {
  _call: MultipleNotificationCall;

  constructor(call: MultipleNotificationCall) {
    this._call = call;
  }

  get channelOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get body(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _channel(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get subscribers(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class MultipleNotificationCall__Outputs {
  _call: MultipleNotificationCall;

  constructor(call: MultipleNotificationCall) {
    this._call = call;
  }
}

export class NotificationAllCall extends ethereum.Call {
  get inputs(): NotificationAllCall__Inputs {
    return new NotificationAllCall__Inputs(this);
  }

  get outputs(): NotificationAllCall__Outputs {
    return new NotificationAllCall__Outputs(this);
  }
}

export class NotificationAllCall__Inputs {
  _call: NotificationAllCall;

  constructor(call: NotificationAllCall) {
    this._call = call;
  }

  get channelOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get body(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _channel(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get subscribers(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class NotificationAllCall__Outputs {
  _call: NotificationAllCall;

  constructor(call: NotificationAllCall) {
    this._call = call;
  }
}

export class SingleNotificationCall extends ethereum.Call {
  get inputs(): SingleNotificationCall__Inputs {
    return new SingleNotificationCall__Inputs(this);
  }

  get outputs(): SingleNotificationCall__Outputs {
    return new SingleNotificationCall__Outputs(this);
  }
}

export class SingleNotificationCall__Inputs {
  _call: SingleNotificationCall;

  constructor(call: SingleNotificationCall) {
    this._call = call;
  }

  get channelOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get body(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _channel(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get subscriber(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class SingleNotificationCall__Outputs {
  _call: SingleNotificationCall;

  constructor(call: SingleNotificationCall) {
    this._call = call;
  }
}
